include "std.gorth"

func main : int do
  const PORT 8080 end

  const count_acc_buf_size                 32 end
  alloc count_acc_buf      count_acc_buf_size end // bufer to store counter as a string
  alloc count_acc                 sizeof(u32) end // counter displayed in responsed html

  alloc sockaddr_in_size sizeof(u32) end    // size of sockaddr_in will be passed by a pointer to accept syscall
  sizeof(sockaddr_in) sockaddr_in_size !32  // save size of sockaddr_in in memory

  alloc host_addr sizeof(sockaddr_in) end // host address to be passed to bind syscall

  const read_buffer_size             1024 end //
  alloc read_buffer      read_buffer_size end // buffer for reading data from accepted socket
  alloc bytes_read                      4 end // how many bytes have been actually read from socket

  const yes_len    sizeof(u32) end
  alloc yes            yes_len end  // value for setsockopt
  1 yes !32                         // set 1 for SO_REUSEADDR

  0 count_acc !32 // init counter

  // Create socket
  AF_INET SOCK_STREAM 0 socket
  if dup 0 != do
    "[ERROR] Can not create socket\n" eputs
    swap drop return
  end drop

  // Fill host_addr fields
  AF_INET          host_addr sockaddr_in.sin_family ptr+ !16
  PORT       htons host_addr sockaddr_in.sin_port   ptr+ !16
  INADDR_ANY htonl host_addr sockaddr_in.sin_addr   ptr+ !32

  capture sock_fd int do drop

    // Set SO_REUSEADDR = 1 for socket
    sock_fd SOL_SOCKET SO_REUSEADDR yes yes_len setsockopt
    capture err int do drop
      if err 0 != do
        "[ERROR] Can not set socket opt to SO_REUSEADDR\n" eputs
        err return
      end
    end // capture err

    // Bind socket to address
    sock_fd host_addr sizeof(sockaddr_in) bind
    capture err int do drop
      if err 0 != do
        "[ERROR] Can not bind socket\n" eputs
        err return
      end
    end // capture err

    // Start listening
    sock_fd SOMAXCONN listen
    capture err int do drop
      if err 0 != do
        "[ERROR] Can not listen to the socket\n" eputs
        err return
      end
    end // capture err

    // Infinite loop for processing input connections
    while true do

      // Accept input connection
      sock_fd host_addr sockaddr_in_size accept
      capture err int do drop
        if err 0 != do drop
          "[ERROR] Can not accept connection\n" eputs
          sock_fd close drop
          err return
        end
      end // capture err

      capture conn_fd int do drop

        // Read from acceptred socket
        conn_fd read_buffer read_buffer_size read
        capture err int do drop
          if err 0 != do drop
            "[ERROR] Can not read from socket\n" eputs
            conn_fd close drop
            sock_fd close drop
            err return
          end
        end // capture err

        // Save count of recieved bytes
        bytes_read !32

        // Clear counter string buffer
        count_acc_buf 0 count_acc_buf_size memset drop

        // Do not count /favicon.ico
        if read_buffer 5 ptr+ @8 'f' != do
          count_acc @32
          1 + count_acc !32

          // Print count of bytes read from accepted connection
          "Bytes read from incoming connection: " puts
          bytes_read @32 puti '\n' putc
        end

        // Write html to socket
        conn_fd "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n"      fputs
        conn_fd "<html><body><h1>Hello from Gorth!</h1>"                  fputs
        conn_fd "<p>This page has been visited: <b>"                      fputs
        conn_fd count_acc_buf count_acc @32 itoa count_acc_buf dup strlen fputs
        conn_fd "</b> time(s)</p></body></html>"                          fputs

        // Clear connection buffer
        read_buffer 0 read_buffer_size memset drop

        // Close accepted socket
        conn_fd close drop

      end // capture conn_fd
    end

    // Close socket
    sock_fd close
  end // capture sock_fd
end
