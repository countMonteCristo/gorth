include "std.gorth"

// The Fibonacci sequence is defined by the recurrence relation:
//        F[n] = F[n-1] + F[n-2], where F[1] = F[2] = 1
// Hence the first 12 terms will be:
//    F[1] = 1      F[7]  = 13
//    F[2] = 1      F[8]  = 21
//    F[3] = 2      F[9]  = 34
//    F[4] = 3      F[10] = 55
//    F[5] = 5      F[11] = 89
//    F[6] = 8      F[12] = 144
// The 12th term, F[12], is the first term to contain three digits.
// What is the index of the first term in the Fibonacci sequence to contain
// 1000 digits?
//
// Answer: 4782
// Note: skip in tests because execution time is quite big


const N 1000 end
alloc a N end
alloc b N end

// @ptr1 + @ptr2 -> ptr2
func big_sum ptr ptr : do
  alloc carry 1 end
  0 carry !8

  capture p1 ptr p2 ptr do drop drop
    0 while dup N < do
      dup
      capture i int do
        p1 i ptr+ @8
        p2 i ptr+ @8
        carry @8 + +
      end
      dup 10 / carry !8
      10 % p2 rot ptr+ !8
      1 +
    end drop
  end
end

func main : int do
  alloc i 8 end
  1 a !8
  1 b !8
  3 i !64

  a b
  while true do
    over over big_sum
    if dup N 1 - ptr+ @8 0 != do
      break
    end
    swap
    i @64 1 + i !64
  end drop drop

  i @64 puti
  0
end
