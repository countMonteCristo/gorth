[*] Change if-block semantic:
  [*] now: <{case} if {...} else {...} end>; what i want it to be: <if {case} do {...} else {...} end>, just like in `while` loops
  [*] add `elif` keyword

[*] Change Strings:
  [*] now string is a pointer to a go-string in string literals array
  [*] want a string to be a (`size`, `data`) pair
  [*] store `data` in byte array
  [*] add argv

[ ] Functions:
  [*] local allocs
  [*] local consts
  [*] return stack
  [*] inlines
  [*] no function definitions inside function allowed
  [*] recursion limit?
  [*] entry point for executable Gorth script (`main` function)
  [*] `return` keyword
  [*] main should not be inlined
  [*] allow recursion for ordinary functions
  [*] add support for using function pointers

[ ] Memory management
  [ ] operation for allocating memory on the heap

[ ] Types
  [ ] custom types (aliases, structures)
  [ ] arrays

[ ] Optimization
  [ ] remove dead code
    [*] remove unused functions

[ ] Captures
  [*] supply captures syntax (capture x int y ptr z bool do ... end)
  [] add support for break's and continue's from capture statement
  [] capture function inputs

[ ] Includes
  [*] `include` keyword
  [*] check for circular includes
  [*] do not import already imported files
  [*] support -I flag for providing additional include paths
  [ ] packages?

[ ] Compile-time type checking
  [*] using stack for types
  [*] use function signatures
  [*] generic functions
  [*] enable type checking by default
  [*] type check inlines

[ ] Improve interpreter
  [*] Add debugger mode (run by step, go in, go out, continue, etc)
    [*] Add simple debugger
    [*] Add parameter loc/glb to env command
    [*] Add `p` command for printing consts, allocs or functions
    [*] Add command for showing parts of memory as a slice
  [ ] Improve debugger
    [*] Add command to go out of current function
  [ ] add profiler
    [*] basic profiler
    [ ] aggregate by functions

[ ] Low-level interaction with OS
  [ ] syscalls
    [*] read, write, open, close
    [ ] other syscalls

[ ] Collect stdlib for Gorth

[ ] Testing
  [ ] more tests
  [*] run tests asynchronously
  [*] add asserts
  [*] implement testing tool:
    [*] test single file, test all files in directory, test all dirs
    [*] support for providing input args and stdin for testcases
    [*] check both return code and stdout/stderr output for testcases
    [*] update testcase expecting output file

[*] Split Gorth project into modules
  [ ] show compilation statuses and timing

[*] Add `break` and `continue` to while loops
  [*] break
  [*] continue
  [*] Replace some ops (break, continue, end, if, else) with unconditional jump operation
  [*] Replace some `do` with conditional jump operation

[*] Improve error messsages
  [*] Add debug levels
  [ ] Separate usual errors (bad Gorth code) and fatal errors (errors in source code)
