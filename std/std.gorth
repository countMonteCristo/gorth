include "unix.gorth"

// Consumes pointer to the null-terminated string, returns its length (exclude terminated \0)
func strlen do // int -> int
  // p p+len
  dup
  while dup @8 0 != do
    1 +
  end
  swap -
end

// Copy memory chunk of length `len` from `src` to `dst`, returns nothing
// WARNING: situations when src and dst are overlapped ARE NOT HANDLED!
func memcpy do    // src len dst -> void
  rot rot over +
  while over over < do
    rot rot
    dup @8
    rot dup rot swap !8
    1 + swap 1 + rot
  end
  drop drop drop
end

// Converts string to unsigned number
// Returns -1 if convertion failed
func atou do  // ptr len -> uint
  alloc result 8 end          // allocate memory for result
  0 result !64                // clear memory

  over + swap                 // ptr len -> ptr_end ptr_begin
  while over over > do
    dup @8 '0' -              // load digit
    dup 10 > over 0 < || if   // if char is not a digit - break and return -1
      drop -1 result !64 break
    end
    result @64 10 * +         // update result number
    result !64                // store result number in memory
    1 +
  end
  drop drop
  result @64
end

// Converts string to signed number
// Returns err=1 if conversion failed
// TODO: signle '+' and '-' both converted to 0
func atoi do  // ptr len -> int err
  alloc result 8 end          // allocate memory for result
  alloc sign_m 1 end
  alloc err 1 end

  0 result !64                // clear memory
  1 sign_m !8                 // set sign
  0 err !8                    // set error to 0

  over @8 '-' = if
    -1 sign_m !8
    1 - swap 1 + swap
  else
    over @8 '+' = if
      1 - swap 1 + swap
    end
  end

  over + swap                 // ptr len -> ptr_end ptr_begin
  while over over > do
    dup @8 '0' -              // load digit

    dup 10 > over 0 < || if   // if char is not a digit - break
      drop -1 result !64
      1 err !8
      break
    end

    result @64 10 * +         // update result number
    result !64                // store result number in memory
    1 +
  end
  drop drop

  err @8 dup 0 > if 0
  else
    result @64 sign_m @8 *
  end

  swap
end

// Consumes number of the input argument and returns pointer to it
func argv_n do
  argv swap 0
  while over over - 0 > do
    rot
    dup strlen + 1 +
    rot rot
    1 +
  end
  drop drop
end

// Sets `size` count of bytes starting from `ptr` to `value`
func memset do  // value ptr size -> ptr
  alloc ptr 4 end
  over ptr !32
  over + // value ptr end
  while over over < do
    rot rot // end value ptr
    over over !8 // end value ptr
    1 + rot // value ptr+1 end
  end
  drop drop drop
  ptr @32
end

// Consumes two numbers and pushes minimum value
func min do
  over over > if swap end drop
end

// Consumes two numbers and pushes maximum value
func max do
  over over < if swap end drop
end

// Consumes one number and pushes its absolute value
func abs do
  dup 0 < if -1 * end
end

// Consumes one number and pushes its sign
func sign do
  dup 0 < if
    drop -1
  else
    dup 0 > if drop 1 else drop 0 end
  end
end

// Consumes two pointers to null-terminated strings, pushes 1 if the first string is
// lexicografically bigger than the second, -1 if it is smaller and 0 if they are equal
func strcmp do
  while over @8 over @8 over over = rot rot drop 0 != && do
    1 + swap 1 + swap
  end

  over @8 over @8 over over > if
    drop drop drop drop 1
  else
    < if
      drop drop -1
    else
      drop drop 0
    end
  end
end

// Prints number and one new line
func p_int do
  puti '\n' putc
end

// Prints string and one new line
func p_str do
  puts '\n' putc
end
