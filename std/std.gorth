include "unix.gorth"

// Basic type sizes
const sizeof(char)                1 end
const sizeof(bool) sizeof(char)     end
const sizeof(i8)   sizeof(char)     end
const sizeof(u8)   sizeof(i8)       end
const sizeof(i16)  sizeof(i8)   2 * end
const sizeof(u16)  sizeof(i16)      end
const sizeof(i32)  sizeof(i8)   4 * end
const sizeof(u32)  sizeof(i32)      end
const sizeof(i64)  sizeof(i8)   8 * end
const sizeof(u64)  sizeof(i64)      end

const sizeof(short)     sizeof(i16) end
const sizeof(ushort)    sizeof(u16) end
const sizeof(int)       sizeof(i32) end
const sizeof(uint)      sizeof(u32) end
const sizeof(long)      sizeof(i64) end
const sizeof(ulong)     sizeof(u64) end
const sizeof(longlong)  sizeof(i64) end
const sizeof(ulonglong) sizeof(u64) end

const sizeof(ptr) sizeof(int) end

const NULL 0 cast(ptr) end

// Structure describing a generic socket addres <bits/socket.h>
const sockaddr.sa_family sizeof(ushort) offset end
const sockaddr.data                  14 offset end
const sizeof(sockaddr)                   reset end

// Internet address <netinet/in.h>
const sizeof(sin_addr) sizeof(u32) end

// Structure describing an Internet socket address <netinet/in.h>
const sockaddr_in.sin_family sizeof(short)    offset end // address family
const sockaddr_in.sin_port   sizeof(u16)      offset end // port
const sockaddr_in.sin_addr   sizeof(sin_addr) offset end // internet address
const sockaddr_in.sin_zero
                           sizeof(sockaddr)
                           sizeof(ushort) -
                           sizeof(u16) -
                           sizeof(sin_addr) -
                                              offset end // pad zeros to size of sockaddr
const sizeof(sockaddr_in)                      reset end


// Adds ptr diff to ptr
inline func ptr+
  ptr int
    :
  ptr
do
  swap cast(int) swap + cast(ptr)
end

// Get distance between 2 pointers
inline func ptr-
  ptr ptr
    :
  int
do
  cast(int) swap cast(int) swap -
end

// Returns length of null-terminated string (exclude terminated \0)
func strlen
  ptr   // const char* string
    :
  int   // string length
do
  // p p+len
  dup
  while dup @8 0 != do
    1 ptr+
  end
  swap ptr-
end

// Copy memory chunk of count `count` bytes from `source` to `destination`, returns nothing
// WARNING: situations when src and dst are overlapped ARE NOT HANDLED!
func memcpy
  ptr   // source
  int   // count of copied bytes
  ptr   // destination
    :
do
  rot rot over swap ptr+
  while over cast(int) over cast(int) < do
    rot rot
    dup @8
    rot dup rot swap !8
    1 ptr+ swap 1 ptr+ rot
  end
  drop drop drop
end

// Converts string to unsigned number
// Returns -1 if convertion failed
// TODO: return (number, errno) maybe?
func atou
  ptr int // pointer to string and its length
    :
  int     // converted number
do
  alloc result 8 end          // allocate memory for result
  0 result !64                // clear memory

  over swap ptr+ swap         // ptr len -> ptr_end ptr_begin
  while over cast(int) over cast(int) > do
    dup @8 '0' -              // load digit
    if dup 10 > over 0 < || do   // if char is not a digit - break and return -1
      drop -1 result !64 break
    end
    result @64 10 * +         // update result number
    result !64                // store result number in memory
    1 ptr+
  end
  drop drop
  result @64
end

// Converts string to signed number
// Returns err=1 if conversion failed
// TODO: signle '+' and '-' both converted to 0
func atoi
  ptr int // pointer to string and its length
    :
  int     // converted number
  int     // errno
do
  alloc result 8 end          // allocate memory for result
  alloc sign_m 1 end
  alloc err 1 end

  0 result !64                // clear memory
  1 sign_m !8                 // set sign
  0 err !8                    // set error to 0

  if over @8 '-' = do
    -1 sign_m !8
    1 - swap 1 ptr+ swap
  else
    if over @8 '+' = do
      1 - swap 1 ptr+ swap
    end
  end

  over swap ptr+ swap         // ptr len -> ptr_end ptr_begin
  while over cast(int) over cast(int) > do
    dup @8 '0' -              // load digit

    if dup 10 > over 0 < ||  do   // if char is not a digit - break
      drop -1 result !64
      1 err !8
      break
    end

    result @64 10 * +         // update result number
    result !64                // store result number in memory
    1 ptr+
  end
  drop drop

  err @8
  if dup 0 > do
    0
  else
    result @64 sign_m @8 *
  end
  swap
end

// Consumes number of the input argument and returns pointer to it
inline func argv_n
  int   // index of the argument
  :
  ptr   // pointer to argument as null-terminated string
do
  sizeof(ptr) * argv swap ptr+ @32 cast(ptr)
end

// Sets `size` count of bytes starting from `pointer` to `value`
func memset
  int   // value
  ptr   // pointer
  int   // size
    :
  ptr   // pointer
do
  alloc tmp 4 end
  over cast(int) tmp !32
  over swap ptr+ // value tmp end
  while over cast(int) over cast(int) < do
    rot rot // end value tmp
    over over !8 // end value tmp
    1 ptr+ rot // value tmp+1 end
  end
  drop drop drop
  tmp @32 cast(ptr)
end

// Consumes two numbers and pushes minimum value
inline func min
  int int : int
do
  if over over > do swap end drop
end

// Consumes two numbers and pushes maximum value
inline func max
  int int : int
do
  if over over < do swap end drop
end

// Consumes one number and pushes its absolute value
inline func abs
  int : int
do
  if dup 0 < do -1 * end
end

// Consumes one number and pushes its sign
inline func sign
  int : int
do
  if dup 0 < do
    drop -1
  else
    if dup 0 > do drop 1 else drop 0 end
  end
end

// Consumes two pointers to null-terminated strings, pushes 1 if the first string is
// lexicografically bigger than the second, -1 if it is smaller and 0 if they are equal
func strcmp
  ptr ptr // str1, str2
    :
  int     // result
do
  while over @8 over @8 over over = rot rot drop 0 != && do
    1 ptr+ swap 1 ptr+ swap
  end

  if over @8 over @8 over over > do
    drop drop drop drop 1
  else
    if < do
      drop drop -1
    else
      drop drop 0
    end
  end
end

// Prints number and one new line
func p_int
  int : // number
do
  puti '\n' putc
end

// Prints string and one new line
func p_str
  ptr int : // pointer to string and its length
do
  puts '\n' putc
end

// Convert sized number to a string. Does not check for buffer overflow!
func itoa
  ptr // string buffer
  int // number to convert
    :
do
  if dup 0 = do
    drop '0' swap !8 return
  end

  if dup 0 < do
    over '-' swap !8
    swap 1 ptr+ swap
    abs
  end

  over over
  while dup 0 > do
    over over dup 10 % '0' + swap drop swap !8
    swap 1 ptr+ swap
    10 /
  end drop -1 ptr+

  // reverse string
  rot
  while over over ptr- 0 > do
    over over
    over @8 over @8

    swap rot !8 swap !8 // a..b -> b..a

    1 ptr+ swap -1 ptr+ swap
  end drop drop drop
end

alloc rand_state 8 end
func srand int do
  rand_state !64
end

// https://en.wikipedia.org/wiki/Linear_congruential_generator
// Simple linear random number generator
const RAND_A    1664525 end
const RAND_C 1013904223 end
const RAND_M    1 32 << end  // 2^32

func rand : int do
  rand_state @64
  RAND_A * RAND_C + RAND_M %
  dup rand_state !64
end
