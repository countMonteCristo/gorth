include "core.gorth"
include "linux/linux.gorth"

// -------------------------------------------------- Math functions ---------------------------------------------------

// Consumes two numbers and pushes minimum value
inline func min
  int int : int
do
  if over over > do swap end drop
end

// Consumes two numbers and pushes maximum value
inline func max
  int int : int
do
  if over over < do swap end drop
end

// Consumes one number and pushes its absolute value
inline func abs
  int : int
do
  if dup 0 < do -1 * end
end

// Consumes one number and pushes its sign
inline func sign
  int : int
do
  if dup 0 < do
    drop -1
  else
    if dup 0 > do drop 1 else drop 0 end
  end
end

// ---------------------------------------------------------------------------------------------------------------------


// ------------------------------------------------- String functions --------------------------------------------------

// Returns length of null-terminated string (exclude terminated \0)
func strlen
  ptr   // const char* string
    :
  int   // string length
do
  // p p+len
  dup
  while dup @8 0 != do
    1 ptr+
  end
  swap ptr-
end

// Consumes two pointers to null-terminated strings, pushes 1 if the first string is
// lexicografically bigger than the second, -1 if it is smaller and 0 if they are equal
func strcmp
  ptr ptr // str1, str2
    :
  int     // result
do
  while over @8 over @8 over over = rot rot drop 0 != && do
    capture s1 ptr s2 ptr do drop drop
      s1 1 ptr+
      s2 1 ptr+
    end // capture s1 s2
  end

  capture s1 ptr s2 ptr do drop drop
    s1 @8 s2 @8
    if over over = do
      drop drop 0
    else
      if < do -1 else +1 end
    end
  end // capture s1 s2
end

// Converts string to unsigned number
// Returns -1 if convertion failed
// TODO: return (number, errno) maybe?
func atou
  ptr int // pointer to string and its length
    :
  int     // converted number
do
  alloc result 8 end          // allocate memory for result
  0 result !64                // clear memory

  over swap ptr+ swap         // ptr len -> ptr_end ptr_begin
  while over over ptr- 0 > do
    dup @8 '0' -              // load digit
    if dup 10 > over 0 < || do   // if char is not a digit - break and return -1
      drop -1 result !64 break
    end
    result @64 10 * +         // update result number
    result !64                // store result number in memory
    1 ptr+
  end
  drop drop
  result @64
end

// Converts string to signed number
// Returns err=1 if conversion failed
// TODO: signle '+' and '-' both converted to 0
func atoi
  ptr int // pointer to string and its length
    :
  int     // converted number
  int     // errno
do
  alloc result 8 end          // allocate memory for result
  alloc sign_m 1 end
  alloc err    1 end

  0 result !64                // clear memory
  1 sign_m !8                 // set sign
  0 err    !8                 // set error to 0

  if over @8 '-' = do
    -1 sign_m !8
    1 - swap 1 ptr+ swap
  else
    if over @8 '+' = do
      1 - swap 1 ptr+ swap
    end
  end

  over swap ptr+ swap         // ptr len -> ptr_end ptr_begin
  while over over ptr- 0 > do
    dup @8 '0' -              // load digit

    if dup 10 > over 0 < ||  do   // if char is not a digit - break
      drop -1 result !64
      1 err !8
      break
    end

    result @64 10 * +         // update result number
    result !64                // store result number in memory
    1 ptr+
  end
  drop drop

  err @8
  if dup 0 > do
    0
  else
    result @64 sign_m @8 *
  end
  swap
end

// Convert sized number to a string. Does not check for buffer overflow!
func itoa
  ptr // string buffer
  int // number to convert
    :
do
  if dup 0 = do
    drop '0' swap !8 return
  end

  if dup 0 < do
    over '-' swap !8
    swap 1 ptr+ swap
    abs
  end

  over over
  while dup 0 > do
    capture buf ptr n int do drop drop
      n 10 % '0' + buf !8
      buf 1 ptr+
      n 10 /
    end // capture buf n
  end drop -1 ptr+ swap drop swap

  // reverse string
  while over over ptr- 0 > do
    capture finish ptr start ptr do drop drop
      finish @8
        start @8 finish !8
      start !8

      finish -1 ptr+
      start   1 ptr+
    end // capture finish start
  end drop drop
end

// ---------------------------------------------------------------------------------------------------------------------


// ------------------------------------------------- Memory functions --------------------------------------------------

// Copy memory chunk of count `count` bytes from `source` to `destination`, returns nothing
// WARNING: situations when src and dst are overlapped ARE NOT HANDLED!
func memcpy
  ptr   // destination
  ptr   // source
  int   // count of copied bytes
    :
do
  over swap ptr+
  capture src_end ptr do drop
    while src_end over ptr- 0 > do
      capture dst ptr src_begin ptr do drop drop
        src_begin @8 dst !8
        dst       1 ptr+
        src_begin 1 ptr+
      end // capture dst src_begin
    end
  end //capture src_end
  drop drop
end

// Sets `size` count of bytes starting from `pointer` to `value`
func memset
  ptr   // pointer
  int   // value
  int   // size
    :
  ptr   // pointer
do
  capture data ptr value int size int do drop drop drop
    value data data size ptr+
    capture ptr_end ptr do drop
      while ptr_end over ptr- 0 > do
        over over !8
        1 ptr+
      end drop drop
    end // capture ptr_end
    data
  end // capture data value count
end

// ---------------------------------------------------------------------------------------------------------------------


// ------------------------------------------------- Custom functions --------------------------------------------------

// Consumes number of the input argument and returns pointer to it
inline func argv_n
  int   // index of the argument
  :
  ptr   // pointer to argument as null-terminated string
do
  sizeof(ptr) * argv swap ptr+ @32 cast(ptr)
end

// ---------------------------------------------------------------------------------------------------------------------


// -------------------------------------------------- Time functions ---------------------------------------------------

// Sleep for given number of nanoseconds
func sleep_ns int : do
  alloc req sizeof(timespec) end

  req 0 sizeof(timespec) memset drop

  capture nanosecs int do drop
    nanosecs NANOSEC_IN_SEC / req timespec.tv_sec  ptr+ !64
    nanosecs NANOSEC_IN_SEC % req timespec.tv_nsec ptr+ !64
    req NULL nanosleep drop
  end
end

// Sleep for given number of microseconds
func sleep_us int : do
  alloc req sizeof(timespec) end

  req 0 sizeof(timespec) memset drop

  capture microseconds int do drop
    microseconds        MICROSEC_IN_SEC / req timespec.tv_sec  ptr+ !64
    microseconds 1000 *  NANOSEC_IN_SEC % req timespec.tv_nsec ptr+ !64
    req NULL nanosleep drop
  end
end

// Sleep for given number of milliseconds
func sleep_ms int : do
  alloc req sizeof(timespec) end

  req 0 sizeof(timespec) memset drop

  capture milliseconds int do drop
    milliseconds            MILLISEC_IN_SEC / req timespec.tv_sec  ptr+ !64
    milliseconds 1000000 *  NANOSEC_IN_SEC % req timespec.tv_nsec ptr+ !64
    req NULL nanosleep drop
  end
end

// Sleep for given number of seconds
func sleep_s int : do
  alloc req sizeof(timespec) end

  req 0 sizeof(timespec) memset drop

  capture seconds int do drop
    seconds req timespec.tv_sec  ptr+ !64
    req NULL nanosleep drop
  end
end

// ---------------------------------------------------------------------------------------------------------------------


// --------------------------------------------------- Println ---------------------------------------------------------

// Prints number and one new line
func println_num
  int : // number
do
  puti '\n' putc
end

// Prints string and one new line
func println
  ptr int : // pointer to string and its length
do
  puts '\n' putc
end

// ---------------------------------------------------------------------------------------------------------------------

// -------------------------------------------- Random numbers generator -----------------------------------------------

alloc rand_state 8 end
func srand int : do
  rand_state !64
end

// https://en.wikipedia.org/wiki/Linear_congruential_generator
// Simple linear random number generator
const RAND_A    1664525 end
const RAND_C 1013904223 end
const RAND_M    1 32 << end  // 2^32

func rand : int do
  rand_state @64
  RAND_A * RAND_C + RAND_M %
  dup rand_state !64
end

// ---------------------------------------------------------------------------------------------------------------------
