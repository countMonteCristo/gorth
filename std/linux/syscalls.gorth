// system call identifiers
const SYS_READ             0 end
const SYS_WRITE            1 end
const SYS_OPEN             2 end
const SYS_CLOSE            3 end
const SYS_STAT             4 end
const SYS_FSTAT            5 end
const SYS_LSTAT            6 end
const SYS_POLL             7 end
const SYS_LSEEK            8 end
// const SYS_MMAP             9 end // TODO: don't know how to do it properly yet
// const SYS_MPROTECT        10 end // TODO: don't know how to do it properly yet
// const SYS_MUNMAP          11 end // TODO: don't know how to do it properly yet
// const SYS_BRK             12 end // TODO: don't know how to do it properly yet
// const SYS_RT_SIGACTION    13 end // TODO: don't know how to do it properly yet (need pointers to functions)
// const SYS_RT_SIGPROCMASK  14 end // TODO: don't know how to do it properly yet (need pointers to functions)
// const SYS_RT_SIGRETURN    15 end // TODO: don't know how to do it properly yet (need pointers to functions)
const SYS_IOCTL           16 end
const SYS_PREAD64         17 end
const SYS_PWRITE64        18 end
const SYS_READV           19 end
const SYS_WRITEV          20 end
const SYS_ACCESS          21 end
const SYS_PIPE            22 end
const SYS_SELECT          23 end
const SYS_SCHED_YIELD     24 end
// const SYS_MREMAP          25 end  // TODO: don't know how to do it properly yet
// const SYS_MSYNC           26 end  // TODO: don't know how to do it properly yet
// const SYS_MINCORE         27 end  // TODO: don't know how to do it properly yet
// const SYS_MADVISE         28 end  // TODO: don't know how to do it properly yet
// const SYS_SHMGET          29 end  // TODO: don't know how to do it properly yet
// const SYS_SHMAT           30 end  // TODO: don't know how to do it properly yet
// const SYS_SHMCTL          31 end  // TODO: don't know how to do it properly yet
const SYS_DUP             32 end
const SYS_DUP2            33 end
// const SYS_PAUSE           34 end  // TODO: don't know how to do it properly yet (need pointers to functions)
const SYS_NANOSLEEP       35 end
// const SYS_GETITIMER       36 end  // TODO: how to retrnslate signals to gorth script?
// const SYS_ALARM           37 end  // TODO: how to retrnslate signals to gorth script?
// const SYS_SETTIMER        38 end  // TODO: how to retrnslate signals to gorth script?
const SYS_GETPID          39 end
const SYS_SENDFILE        40 end
const SYS_SOCKET          41 end
const SYS_CONNECT         42 end
const SYS_ACCEPT          43 end
const SYS_SENDTO          44 end
const SYS_RECVFROM        45 end
const SYS_SENDMSG         46 end
const SYS_RECVMSG         47 end
const SYS_SHUTDOWN        48 end
const SYS_BIND            49 end
const SYS_LISTEN          50 end
const SYS_GETSOCKNAME     51 end
const SYS_GETPEERNAME     52 end
const SYS_SOCKETPAIR      53 end
const SYS_SETSOCKOPT      54 end
const SYS_GETSOCKOPT      55 end
// const SYS_CLONE           56 end  // TODO: don't know how to do it properly yet
const SYS_FORK            57 end
const SYS_VFORK           58 end
const SYS_EXECVE          59 end
const SYS_EXIT            60 end
const SYS_WAIT4           61 end
const SYS_KILL            62 end
// below this line not all syscalls are implemented
const SYS_UNAME           63 end
const SYS_SEMGET          64 end
const SYS_SEMOP           65 end
const SYS_SEMCTL          66 end
const SYS_SHMDT           67 end
const SYS_MSGGET          68 end
const SYS_MSGSND          69 end
const SYS_MSGRCV          70 end
const SYS_MSGCTL          71 end
const SYS_FCNTL           72 end
const SYS_FLOCK           73 end
const SYS_FSYNC           74 end
const SYS_FDATASYNC       75 end
const SYS_TRUNCATE        76 end
const SYS_FTRUNCATE       77 end
const SYS_GETDENTS        78 end
const SYS_GETCWD          79 end
const SYS_CHDIR           80 end
const SYS_FCHDIR          81 end
const SYS_RENAME          82 end
const SYS_MKDIR           83 end
const SYS_RMDIR           84 end
const SYS_CREAT           85 end
const SYS_LINK            86 end
const SYS_UNLINK          87 end
const SYS_SYMLINK         88 end
const SYS_READLINK        89 end
const SYS_CHMOD           90 end
const SYS_FCHMOD          91 end
const SYS_CHOWN           92 end
const SYS_FCHOWN          93 end
const SYS_LCHOWN          94 end
const SYS_UNMASK          95 end
const SYS_GETTIMEOFDAY    96 end
const SYS_GETRLIMIT       97 end
const SYS_GETRUSAGE       98 end
const SYS_SYSINFO         99 end
const SYS_TIMES          100 end


// ------------------------------------------------------ SYSCALLS -----------------------------------------------------

// Execute `read` system call
inline func read
  int   // file descriptor
  ptr   // buffer
  int   // bytes count to be read
    :
  int   // bytes have been read
  int   // errno
do
  SYS_READ syscall3
end

// Execute `write` system call
inline func write
  int   // file descriptor
  ptr   // buffer
  int   // bytes count to write
    :
  int   // bytes have been write
  int   // errno
do
  SYS_WRITE syscall3
end

// Execute `open` system call
inline func open
  ptr   // const char* filename
  int   // flags
  int   // mode
    :
  int   // file descriptor
  int   // errno
do
  SYS_OPEN syscall3
end

// Execute `close` system call
inline func close
  int   // file descriptor
    :
  int   // errno
do
  SYS_CLOSE syscall1 swap drop // SYS_CLOSE returns {unused} {errno}, just drop {unused}
end

// Execute `stat` system call
inline func stat
  ptr   // path name
  ptr   // statbuf
    :
  int   // errno
do
  SYS_STAT syscall2 swap drop
end

// Execute `fstat` system call
inline func fstat
  int   // fd
  ptr   // statbuf
    :
  int   // errno
do
  SYS_FSTAT syscall2 swap drop
end

// Execute `lstat` system call
inline func lstat
  ptr   // path name
  ptr   // statbuf
    :
  int   // errno
do
  SYS_LSTAT syscall2 swap drop
end

// Execute `poll` system call
inline func poll
  ptr   // fds
  int   // fds count
  int   // timeout in ms
    :
  int   // count of fds where some event has happend or 0 when timeout
  int   // errno
do
  SYS_POLL syscall3
end

// Execute `lseek` system call
inline func lseek
  int   // fd
  int   // offset
  int   // whence
    :
  int   // result offset in bytes or -1 on error
  int   // errno
do
  SYS_LSEEK syscall3
end

// Execute `ioctl` system call
inline func ioctl
  int   // fd
  int   // request
  int   // arg
    :
  int   // errno
do
  SYS_IOCTL syscall3 swap drop
end

// Execute `pread64` system call
inline func pread64
  int   // fd
  ptr   // buf
  int   // count
  int   // offset
    :
  int   // number of bytes read
  int   // errno
do
  SYS_PREAD64 syscall4
end

// Execute `pwrite64` system call
inline func pwrite64
  int   // fd
  ptr   // buf
  int   // count
  int   // offset
    :
  int   // number of bytes written
  int   // errno
do
  SYS_PWRITE64 syscall4
end

// Execute `readv` system call
inline func readv
  int   // fd
  ptr   // iov
  int   // iovcnt
    :
  int   // number of bytes read
  int   // errno
do
  SYS_READV syscall3
end

// Execute `writev` system call
inline func writev
  int   // fd
  ptr   // iov
  int   // iovcnt
    :
  int   // number of bytes written
  int   // errno
do
  SYS_WRITEV syscall3
end

// Execute `access` system call
inline func access
  ptr   // filename
  int   // mode
    :
  int   // errno
do
  SYS_ACCESS syscall2 swap drop
end

// Execute `pipe` system call
inline func pipe
  ptr   // fds[2]
    :
  int   // errno
do
  SYS_PIPE syscall1 swap drop
end

// Execute `select` system call
inline func select
  int   // n
  ptr   // input fds
  ptr   // output fds
  ptr   // except fds
  ptr   // timeout
    :
  int   // number of fds in three fds sets or 0 in case of timeout
  int   // errno
do
  SYS_SELECT syscall5
end

// Execute `sched_yield` system call
inline func sched_yield
    :
  int   // errno
do
  SYS_SCHED_YIELD syscall0 swap drop
end

// Execute `dup` system call
inline func dup_
  int   // oldfd
    :
  int   // new fd or -1
  int   // errno
do
  SYS_DUP syscall1
end

// Execute `dup2` system call
inline func dup2
  int   // oldfd
  int   // newfd
    :
  int   // new fd or -1
  int   // errno
do
  SYS_DUP2 syscall2
end

// Execute `nanosleep` system call
inline func nanosleep
  ptr   // required time
  ptr   // remain time or NULL
    :
  int   // errno
do
  SYS_NANOSLEEP syscall2 drop
end

// Execute `getpid` system call
inline func getpid
    :
  int // pid
  int // errno
do
  SYS_GETPID syscall0
end

// Execute `sendfile` system call
inline func sendfile
  int   // out_fd
  int   // in_fd
  ptr   // offset_ptr
  int   // count
    :
  int   // number of bytes written or -1 on error
  int   // errno
do
  SYS_SENDFILE syscall4
end

// Execute `socket` system call
inline func socket
  int // domain
  int // type
  int // protocol
    :
  int // socket fd or -1 on error
  int // errno
do
  SYS_SOCKET syscall3
end

// Execute `connect` system call
inline func connect
  int // sock_fd
  ptr // addr_ptr
  int // addr_len
    :
  int // errno
do
  SYS_CONNECT syscall3 swap drop
end

// Execute `accept` system call
inline func accept
  int // sock_fd
  ptr // addr
  ptr // addr_len
    :
  int // sock_fd or -1 on error
  int // errno
do
  SYS_ACCEPT syscall3
end

// Execute `sendto` system call
inline func sendto
  int // sock_fd
  ptr // buf
  int // len
  int // flags
  ptr // dest_addr_ptr
  int // addrlen
    :
  int // number of bytes sent or -1 on error
  int // errno
do
  SYS_SENDTO syscall6
end

// Execute `recvfrom` system call
inline func recvfrom
  int // sock_fd
  ptr // buf
  int // len
  int // flags
  ptr // dest_addr_ptr
  ptr // addrlen_ptr
    :
  int // number of bytes recieved or -1 on error
  int // errno
do
  SYS_RECVFROM syscall6
end

// Execute `sendmsg` system call
inline func sendmsg
  int // sock_fd
  ptr // msg_ptr
  int // flags
    :
  int // number of bytes sent or -1 on error
  int // errno
do
  SYS_SENDMSG syscall3
end

// Execute `recvmsg` system call
inline func recvmsg
  int // sock_fd
  ptr // msg_ptr
  int // flags
    :
  int // number of bytes sent or -1 on error
  int // errno
do
  SYS_RECVMSG syscall3
end

// Execute `shutdown` system call
inline func shutdown
  int // socket fd
  int // how
    :
  int // errno
do
  SYS_SHUTDOWN syscall2 swap drop
end

// Execute `bind` system call
inline func bind
  int // sock_fd
  ptr // addr
  int // addr_len
    :
  int // errno
do
  SYS_BIND syscall3 swap drop
end

// Execute `listen` system call
inline func listen
  int // sock_fd
  int // backlog
    :
  int // errno
do
  SYS_LISTEN syscall2 swap drop
end

// Execute `getsockname` system call
inline func getsockname
  int // sockfd
  ptr // addr_ptr
  ptr // addrlen_ptr
    :
  int // errno
do
  SYS_GETSOCKNAME syscall3 swap drop
end

// Execute `getpeername` system call
inline func getpeername
  int // sockfd
  ptr // addr_ptr
  ptr // addrlen_ptr
    :
  int // errno
do
  SYS_GETPEERNAME syscall3 swap drop
end

// Execute `socketpair` system call
inline func socketpair
  int // domain
  int // type
  int // protocol
  ptr // sv[2]
    :
  int // errno
do
  SYS_SOCKETPAIR syscall4 swap drop
end

// Execute `setsockopt` system call
inline func setsockopt
  int // socket fd
  int // level
  int // optname
  ptr // optval_ptr
  int // optlen
    :
  int // errno
do
  SYS_SETSOCKOPT syscall5 swap drop
end

// Execute `getsockopt` system call
inline func getsockopt
  int // socket fd
  int // level
  int // optname
  ptr // optval_ptr
  ptr // optlen_ptr
    :
  int // errno
do
  SYS_GETSOCKOPT syscall5 swap drop
end

// Execute `fork` system call
inline func fork
    :
  int // child pid or 0 on error
  int // errno
do
  SYS_FORK syscall0
end

// Execute `vfork` system call
inline func vfork
    :
  int // child pid or 0 on error
  int // errno
do
  SYS_VFORK syscall0
end

// Execute `execve` system call
inline func execve
  ptr // program name
  ptr // char* argv[]
  ptr // char *env[]
    :
  int // errno
do
  SYS_EXECVE syscall3 swap drop
end

// Execute `exit` system call
inline func exit
  int // exit code
    :
do
  SYS_EXIT syscall1 drop drop
end

// execute wait4 system call
inline func wait4
  int   // pid
  ptr   // wstatus or NULL
  int   // options
  ptr   // rusage or NULL
    :
  int   // pid
  int   // errno
do
  SYS_WAIT4 syscall4
end

// Execute `kill` system call
inline func kill
  int // pid
  int // signal
    :
  int // errno
do
  SYS_KILL syscall2 swap drop
end

// Execute `fcntl` system call
inline func fcntl
  int   // fd
  int   // cmd
  int   // arg
    :
  int   // returned value depends on command
  int   // errno
do
  SYS_FCNTL syscall3
end

// Execute `flock` system call
inline func flock
  int   // fd
  int   // cmd
    :
  int   // errno
do
  SYS_FLOCK syscall2 swap drop
end

// Execute `fsync` system call
inline func fsync
  int   // fd
    :
  int   // errno
do
  SYS_FSYNC syscall1 swap drop
end

// Execute `fdatasync` system call
inline func fdatasync
  int   // fd
    :
  int   // errno
do
  SYS_FDATASYNC syscall1 swap drop
end

// Execute `ftruncate` system call
inline func ftruncate
  int   // fd
  int   // length
    :
  int   // errno
do
  SYS_FTRUNCATE syscall2 swap drop
end

// ---------------------------------------------------------------------------------------------------------------------
