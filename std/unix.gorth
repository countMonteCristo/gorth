// system call identifiers
const SYS_READ        0 end
const SYS_WRITE       1 end
const SYS_OPEN        2 end
const SYS_CLOSE       3 end
const SYS_NANOSLEEP  35 end
const SYS_SOCKET     41 end
const SYS_ACCEPT     43 end
const SYS_BIND       49 end
const SYS_LISTEN     50 end
const SYS_SETSOCKOPT 54 end
const SYS_FORK       57 end
const SYS_WAIT4      61 end

// Standart streams
const STDIN  0 end
const STDOUT 1 end
const STDERR 2 end

// flags for open syscall
const O_RDONLY    0o00000000 end
const O_WRONLY    0o00000001 end
const O_RDWR      0o00000002 end
const O_CREAT     0o00000100 end
const O_EXCL      0o00000200 end
const O_NOCTTY    0o00000400 end
const O_TRUNC     0o00001000 end
const O_APPEND    0o00002000 end
const O_NONBLOCK  0o00004000 end
const O_DSYNC     0o00010000 end
const FASYNC      0o00020000 end
const O_DIRECT    0o00040000 end
const O_LARGEFILE 0o00100000 end
const O_DIRECTORY 0o00200000 end
const O_NOFOLLOW  0o00400000 end
const O_NOATIME   0o01000000 end
const O_CLOEXEC   0o02000000 end

// flags for create new files
const S_NONE       0 end
const S_IXOTH      1 end
const S_IWOTH      2 end
const S_IROTH      4 end
const S_IRWXO      7 end
const S_IXGRP      8 end
const S_IWGRP     16 end
const S_IRGRP     32 end
const S_IRWXG     56 end
const S_IXUSR     64 end
const S_IWUSR    128 end
const S_IRUSR    256 end
const S_IRWXU    448 end
const S_ISVTX    512 end
const S_ISGID   1024 end
const S_ISUID   2048 end
const S_IFIFO   4096 end
const S_IFCHR   8192 end
const S_IFDIR  16384 end
const S_IFREG  32768 end
const S_IFBLK  24576 end
const S_IFLNK  40960 end
const S_IFSOCK 49152 end
const S_IFMT   61440 end

// Addresses
const INADDR_ANY       0x00000000 end // Address to accept any incoming messages
const INADDR_BROADCAST 0xffffffff end // Address to send to all hosts
const INADDR_NONE      0xffffffff end // Address indicating an error return
const INADDR_DUMMY     0xc0000008 end // Dummy address for source of ICMPv6 errors converted to IPv4 (RFC7600)

// Address families
const AF_LOCAL  1 end
const AF_INET   2 end
const AF_INET6 10 end

// Types of sockets
const SOCK_STREAM    1 end  // Sequenced, reliable, connection-based byte streams
const SOCK_DGRAM     2 end  // Connectionless, unreliable datagrams of fixed maximum length
const SOCK_RAW       3 end  // Raw protocol interface
const SOCK_RDM       4 end  // Reliably-delivered messages
const SOCK_SEQPACKET 5 end  // Sequenced, reliable, connection-based,datagrams of fixed maximum length
const SOCK_DCCP      6 end  // Datagram Congestion Control Protocol
const SOCK_PACKET   10 end  // Linux specific way of getting packets at the dev level. For writing rarp and other similar things on the user level

// Maximum queue length specifiable by listen
const SOMAXCONN    4096 end

// Socket levels
const SOL_SOCKET     1 end

// Socket option names
const SO_REUSEADDR   2 end
const SO_TYPE        3 end
const SO_ERROR       4 end
const SO_DONTROUTE   5 end
const SO_BROADCAST   6 end
const SO_SNDBUF      7 end
const SO_RCVBUF      8 end
const SO_KEEPALIVE   9 end
const SO_OOBINLINE  10 end
const SO_LINGER     13 end
const SO_RCVLOWAT   18 end
const SO_SNDLOWAT   19 end
const SO_ACCEPTCONN 30 end

// Revverse byte order for 16-bit integers
inline func htons
  int : int // 16-bit integers
do
  // ab -> ba
  dup  0xff   & 8 <<  // ab -> b0
  swap 0xff00 & 8 >>  // ab -> 0a
  |                   // b0 | 0a -> ba
end

// Revverse byte order for 32-bit integers
inline func htonl
  int : int // 32-bit integers
do
  // abcd -> dcba
  dup  0xffff     & htons 16 <<       // abcd -> 00cd -> 00dc -> dc00
  swap 0xffff0000 &       16 >> htons // abcd -> ab00 -> 00ab -> 00ba
  |                                   // dc00 | 00ba -> dcba
end

// ------------------------------------------------------ SYSCALLS -----------------------------------------------------

// Execute `open` system call
inline func open
  ptr   // const char* filename
  int   // flags
  int   // mode
    :
  int   // file descriptor
  int   // errno
do
  SYS_OPEN syscall3
end

// Execute `read` system call
inline func read
  int   // file descriptor
  ptr   // buffer
  int   // bytes count to be read
    :
  int   // bytes have been read
  int   // errno
do
  SYS_READ syscall3
end

// Execute `write` system call
inline func write
  int   // file descriptor
  ptr   // buffer
  int   // bytes count to write
    :
  int   // bytes have been write
  int   // errno
do
  SYS_WRITE syscall3
end

// Execute `close` system call
inline func close
  int   // file descriptor
    :
  int   // errno
do
  SYS_CLOSE syscall1 swap drop // SYS_CLOSE returns {unused} {errno}, just drop {unused}
end

// Execute `nanosleep` system call
inline func nanosleep
  ptr   // required time
  ptr   // remain time or NULL
    :
  int   // errno
do
  SYS_NANOSLEEP syscall2 drop
end

// Execute `socket` system call
inline func socket
  int // domain
  int // type
  int // protocol
    :
  int // socket fd
  int // errno
do
  SYS_SOCKET syscall3
end

// Execute `setsockopt` system call
inline func setsockopt
  int // socket fd
  int // level
  int // optname
  ptr // optval_ptr
  int // optlen
    :
  int // errno
do
  SYS_SETSOCKOPT syscall5 swap drop
end

// Execute `bind` system call
inline func bind
  int // sock_fd
  ptr // addr
  int // addr_len
    :
  int // errno
do
  SYS_BIND syscall3 swap drop
end

// Execute `listen` system call
inline func listen
  int // sock_fd
  int // backlog
    :
  int // errno
do
  SYS_LISTEN syscall2 swap drop
end

// Execute `accept` system call
inline func accept
  int // sock_fd
  ptr // addr
  ptr // addr_len
    :
  int // sock_fd
  int // errno
do
  SYS_ACCEPT syscall3
end

// Execute `fork` syscall
func fork
    :
  int
  int
do
  SYS_FORK syscall0
end

// execute wait4 syscall
func wait4
  int   // pid
  ptr   // wstatus or NULL
  int   // options
  ptr   // rusage or NULL
    :
  int   // pid
  int   // errno
do
  SYS_WAIT4 syscall4
end

// ---------------------------------------------------------------------------------------------------------------------

// --------------------------------------------------- Write Functions -------------------------------------------------

// Prints string to fd
inline func fputs
  int   // fd
  ptr   // const char* string
  int   // string length
    :
do
  write drop drop
end

// Prints string to stdout
inline func puts
  ptr   // const char* string
  int   // string length
    :
do
  capture data ptr len int do drop drop
    STDOUT data len fputs
  end
end

// Prints string to stderr
inline func eputs
  ptr   // const char* string
  int   // string length
    :
do
  capture data ptr len int do drop drop
    STDERR data len fputs
  end
end

// Prints char to fd
func fputc
  int     // fd
  int     // char
    :
do
  alloc buf 1 end
  buf !8
  buf 1 fputs
end

// Prints char to stdout
func putc
  int     // char
    :
do
  capture char int do drop
    STDOUT char fputc
  end
end

// Prints char to stderr
func eputc
  int     // char
    :
do
  capture char int do drop
    STDERR char fputc
  end
end

// ---------------------------------------------------------------------------------------------------------------------

// TODO: add errno messages
